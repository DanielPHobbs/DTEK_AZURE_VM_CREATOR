#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 5d4ffab2-a0b9-42fd-a4cc-3ee7484bff51
# Source File: DTEK-AZURE-RESOURCE-COLLECTOR.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2019 v5.6.159
     Generated on:       25/02/2019 20:15
     Generated by:       danny
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2019
#>


#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-DTEK-AZURE-RESOURCE-COLLECTOR_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formMain = New-Object 'System.Windows.Forms.Form'
	$radiobuttonRSV = New-Object 'System.Windows.Forms.RadioButton'
	$buttonRefreshView = New-Object 'System.Windows.Forms.Button'
	$radiobuttonStorageAccount = New-Object 'System.Windows.Forms.RadioButton'
	$radiobuttonLoadBalancer = New-Object 'System.Windows.Forms.RadioButton'
	$radiobuttonResourceGroup = New-Object 'System.Windows.Forms.RadioButton'
	$radiobuttonNSG = New-Object 'System.Windows.Forms.RadioButton'
	$radiobuttonVM = New-Object 'System.Windows.Forms.RadioButton'
	$radiobuttonVNet = New-Object 'System.Windows.Forms.RadioButton'
	$checkboxAuto = New-Object 'System.Windows.Forms.CheckBox'
	$textbox3 = New-Object 'System.Windows.Forms.TextBox'
	$textbox2 = New-Object 'System.Windows.Forms.TextBox'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$buttonUpdateInventoryDatab = New-Object 'System.Windows.Forms.Button'
	$buttonImportToSCSM = New-Object 'System.Windows.Forms.Button'
	$buttonAuthenticate = New-Object 'System.Windows.Forms.Button'
	$listbox1 = New-Object 'System.Windows.Forms.ListBox'
	$datagridviewResults = New-Object 'System.Windows.Forms.DataGridView'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$buttonCollectInventory = New-Object 'System.Windows.Forms.Button'
	$checkboxCheckbox1 = New-Object 'System.Windows.Forms.CheckBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	#region Control Helper Functions
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ListBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
		{
			$ListBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ListBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ListBox.Items.Add($obj)
			}
			$ListBox.EndUpdate()
		}
		else
		{
			$ListBox.Items.Add($Items)
		}
		
		$ListBox.DisplayMember = $DisplayMember
		$ListBox.ValueMember = $ValueMember
	}
	
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($null -eq $Item)
		{
			$DataGridView.DataSource = $null
		}
		elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($null -eq $InputObject)
		{
			$Table.Clear()
			return @( ,$Table)
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	#endregion
	################################################################################
	#########################   INIT LOAD ##########################################
	################################################################################
	$formMain_Load={
		$Global:Now = Get-date
		$Global:NewLine = "`r`n"
		
		#// init Data Arrays
		$Global:virtual_machine_object_All = @()
		$Global:azure_load_balancer_object_ALL = @()
		$Global:virtual_network_object_All = @()
		$Global:storage_account_object_All = @()
		$Global:network_security_groups_object_All = @()
		
		<#
		####### Get latest AzureRM module - remove all old 
		
		Get-InstalledModule -Name AzureRM -AllVersions
		Enable-AzureRmAlias 
		
		Install-Module Azurerm –Repository PSGallery –AllowClobber -force
		Get-Module -ListAvailable -Name Az -Refresh
		Find-Module AzureRM
		Get-InstalledModule -Name "Az" -RequiredVersion 1.3.0  | Uninstall-Module
		https://docs.microsoft.com/en-us/powershell/azure/migrate-from-azurerm-to-az?view=azps-1.3.0
		#>
		
		#$checkboxAuto.Checked=$true
		
		################functions ################
		
		Function global:AppendLog ([string]$Message)
		{
			$script:CurrentAction = $Message
			$script:TraceLog += ((Get-Date).ToString() + "`t" + $Message + " `r`n")
		}
		
		
	}
	
	###############################################################################
	####################### COLLECT DATA ##########################################
	###############################################################################
	
	$buttonCollectInventory_Click= {
		
		
		function Get-AzureInventory
		{
			
			Param (
				[String]$Global:subscription_id
			)
			
			# Selecting the subscription
			Select-AzureRmSubscription -Subscription $Global:subscription_id
			
			
			
			# Create a new directory with the subscription name
			$path_to_store_inventory_csv_files = "E:\AzureInventory\" + $Global:subscription_id
			
			$richtextbox1.Text += "Fetching Inventory from $Global:subscription_name" + $Global:NewLine
			
			Try
			{
				# Fetch the RG details from the subscription
				$richtextbox1.Text += "Loading resource groups" + $Global:NewLine
				start-job{ $azureRGDetails = Get-AzureRmResourceGroup }
				
				# Fetch the NIC details from the subscription
				$richtextbox1.Text += "Loading NIC details" + $Global:NewLine
				start-job{ $azureNICDetails = Get-AzureRmNetworkInterface }
				
				# Fetch the Storage Accounts from the subscription
				start-job{ $azureStorageAccountDetails = Get-AzureRmStorageAccount }
				
				# Fetch the Virtual Networks from the subscription
				start-job{ $azureVirtualNetworkDetails = Get-AzureRmVirtualNetwork }
				
				# Fetch the NSG rules from the subscription
				start-job{ $azureNSGDetails = Get-AzureRmNetworkSecurityGroup }
				
				# Fetch the Azure load balancer details
				start-job{ $AzureLBList = Get-AzureRmLoadBalancer }
				
				# Fetch the Virtual Machines from the subscription
				$jobScript = { get-azurermvm }
				Start-Job -ScriptBlock $jobScript -Name 'GetVMAzure1'
				Wait-Job -Name 'GetVMAzure1'
				[array]$azureVMDetails = (Get-Job -Name 'GetVMAzure1' | Receive-Job);
				
				
			}
			catch
			{
				$richtextbox1.Text += "An error occured in fetching data" + $Global:NewLine
				
			}
			
			
			
			
			# Create a new directory with the subscription name
			new-item $path_to_store_inventory_csv_files -ItemType Directory -Force
			
			# Change the directory location to store the CSV files
			Set-Location -Path $path_to_store_inventory_csv_files
			
			
			#####################################################################
			#    Fetching Virtual Machine Details                               #
			#####################################################################
			
			$richtextbox1.Text += "Fetching Virtual Machine Details" + $Global:NewLine
			
			$virtual_machine_object = $null
			$virtual_machine_object = @()
			
			
			# Iterating over the Virtual Machines under the subscription
			
			foreach ($azureVMDetails_Iterator in $azureVMDetails)
			{
				
				# Fetching the satus
				$vm_status = get-azurermvm -ResourceGroupName $azureVMDetails_Iterator.resourcegroupname -name $azureVMDetails_Iterator.name -Status
				
				#Fetching the private IP
				foreach ($azureNICDetails_iterator in $azureNICDetails)
				{
					if ($azureNICDetails_iterator.Id -eq $azureVMDetails_Iterator.NetworkProfile.NetworkInterfaces.id)
					{
						#write-Host $vm.NetworkInterfaceIDs
						$private_ip_address = $azureNICDetails_iterator.IpConfigurations.privateipaddress
					}
				}
				
				#Fetching data disk names
				$data_disks = $azureVMDetails_Iterator.StorageProfile.DataDisks
				$data_disk_name_list = ''
	        <#
	        if($data_disks.Count -eq 0){
	            $data_disk_name_list = "No Data Disk Attached"
	            #write-host $data_disk_name_list
	        }elseif($data_disks.Count -ge 1) {
	
	        #>
				foreach ($data_disks_iterator in $data_disks)
				{
					$data_disk_name_list_temp = $data_disk_name_list + "; " + $data_disks_iterator.name
					#Trimming the first three characters which contain --> " ; "
					$data_disk_name_list = $data_disk_name_list_temp.Substring(2)
					#write-host $data_disk_name_list
				}
				
				#}
				
				
				
				# Fetching OS Details (Managed / un-managed)
				
				if ($azureVMDetails_Iterator.StorageProfile.OsDisk.manageddisk -eq $null)
				{
					# This is un-managed disk. It has VHD property
					
					$os_disk_details_unmanaged = $azureVMDetails_Iterator.StorageProfile.OsDisk.Vhd.Uri
					$os_disk_details_managed = "This VM has un-managed OS Disk"
					
				}
				else
				{
					
					$os_disk_details_managed = $azureVMDetails_Iterator.StorageProfile.OsDisk.ManagedDisk.Id
					$os_disk_details_unmanaged = "This VM has Managed OS Disk"
				}
				
				$virtual_machine_object_temp = new-object PSObject
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "SubScription" -Value $global:subscription_Name
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "ResourceGroupName" -Value $azureVMDetails_Iterator.ResourceGroupName
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "VMName" -Value $azureVMDetails_Iterator.Name
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "VMStatus" -Value $vm_status.Statuses[1].DisplayStatus
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "Location" -Value $azureVMDetails_Iterator.Location
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "VMSize" -Value $azureVMDetails_Iterator.HardwareProfile.VmSize
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "OSDisk" -Value $azureVMDetails_Iterator.StorageProfile.OsDisk.OsType
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "OSImageType" -Value $azureVMDetails_Iterator.StorageProfile.ImageReference.sku
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "AdminUserName" -Value $azureVMDetails_Iterator.OSProfile.AdminUsername
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "NICId" -Value $azureVMDetails_Iterator.NetworkProfile.NetworkInterfaces.id
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "OSVersion" -Value $azureVMDetails_Iterator.StorageProfile.ImageReference.Sku
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "PrivateIP" -Value $private_ip_address
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "ManagedOSDiskURI" -Value $os_disk_details_managed
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "UnManagedOSDiskURI" -Value $os_disk_details_unmanaged
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "DataDiskNames" -Value $data_disk_name_list
				
				
				$virtual_machine_object += $virtual_machine_object_temp
				
				##### make vm list append ####
				$global:virtual_machine_object_All += $virtual_machine_object_temp
			}
			
			$virtual_machine_object | Export-Csv "Virtual_Machine_details.csv" -NoTypeInformation -Force
			
			
			
			############################################################################
			#    Fetching custom Network Security Groups Details                       #
			############################################################################
			
			$richtextbox1.Text += "Fetching custom Network Security Groups Details" + $Global:NewLine
			
			$network_security_groups_object = $null
			$network_security_groups_object = @()
			
			foreach ($azureNSGDetails_Iterator in $azureNSGDetails)
			{
				
				
				
				$securityRulesPerNSG = $azureNSGDetails_Iterator.SecurityRules
				if ($securityRulesPerNSG -eq $null)
				{
					continue
				}
				
				foreach ($securityRulesPerNSG_Iterator in $securityRulesPerNSG)
				{
					
					$network_security_groups_object_temp = new-object PSObject
					$network_security_groups_object_temp | Add-Member -MemberType NoteProperty -Name "Subscription" -Value $global:subscription_Name
					$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "Name" -Value $securityRulesPerNSG_Iterator.Name
					$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "Priority" -Value $securityRulesPerNSG_Iterator.Priority
					$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "Protocol" -Value $securityRulesPerNSG_Iterator.Protocol
					$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "Direction" -Value $securityRulesPerNSG_Iterator.Direction
					$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "SourcePortRange" -Value ($securityRulesPerNSG_Iterator | Select-Object @{ Name = "SourcePortRange"; Expression = { $_.SourcePortRange } })
					$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "DestinationPortRange" -Value ($securityRulesPerNSG_Iterator | Select-Object @{ Name = "DestinationPortRange"; Expression = { $_.DestinationPortRange } })
					$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "SourceAddressPrefix" -Value ($securityRulesPerNSG_Iterator | Select-Object @{ Name = "SourceAddressPrefix"; Expression = { $_.SourceAddressPrefix } })
					$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "DestinationAddressPrefix" -Value ($securityRulesPerNSG_Iterator | Select-Object @{ Name = "DestinationAddressPrefix"; Expression = { $_.DestinationAddressPrefix } })
					$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "Access" -Value $securityRulesPerNSG_Iterator.Access
					
					$network_security_groups_object += $network_security_groups_object_temp
					$Global:network_security_groups_object_All += $network_security_groups_object_temp
				}
				
				# Setting the pointer to the next row and first column
				
				
			}
			
			if ($network_security_groups_object -ne $null)
			{
				$network_security_groups_object | Export-Csv "nsg_custom_rules_details.csv" -NoTypeInformation -Force
			}
			
			
			
			
			#####################################################################
			#    Fetching Storage Account Details                               #
			#####################################################################
			
			$richtextbox1.Text += "Fetching Storage Account Details" + $Global:NewLine
			
			
			$storage_account_object = $null
			$storage_account_object = @()
			
			foreach ($azureStorageAccountDetails_Iterator in $azureStorageAccountDetails)
			{
				
				# Populating the cells
				
				$storage_account_object_temp = new-object PSObject
				$storage_account_object_temp | Add-Member -MemberType NoteProperty -Name "Subscription" -Value $global:subscription_Name
				$storage_account_object_temp | add-member -MemberType NoteProperty -Name "ResourceGroupName" -Value $azureStorageAccountDetails_Iterator.ResourceGroupName
				$storage_account_object_temp | add-member -MemberType NoteProperty -Name "StorageAccountName" -Value $azureStorageAccountDetails_Iterator.StorageAccountName
				$storage_account_object_temp | add-member -MemberType NoteProperty -Name "Location" -Value $azureStorageAccountDetails_Iterator.Location
				$storage_account_object_temp | add-member -MemberType NoteProperty -Name "StorageTier" -Value $azureStorageAccountDetails_Iterator.Sku.Tier
				$storage_account_object_temp | add-member -MemberType NoteProperty -Name "ReplicationType" -Value $azureStorageAccountDetails_Iterator.Sku.Name
				
				
				
				# Setting the pointer to the next row and first column
				$storage_account_object += $storage_account_object_temp
				$Global:storage_account_object_All += $storage_account_object_temp
			}
			
			$storage_account_object | Export-Csv "Storage_Account_Details.csv" -NoTypeInformation -Force
			
			
			
			#####################################################################
			#    Fetching Virtual Network Details                               #
			#####################################################################
			$richtextbox1.Text += "Fetching Virtual Network Details" + $Global:NewLine
			
			$virtual_network_object = $null
			$virtual_network_object = @()
			
			foreach ($azureVirtualNetworkDetails_Iterator in $azureVirtualNetworkDetails)
			{
				
				$virtual_network_object_temp = New-Object PSObject
				
				# Populating the cells
				$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name "Subscription" -Value $global:subscription_Name
				$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name "ResourceGroupName" -Value $azureVirtualNetworkDetails_Iterator.ResourceGroupName
				$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name "Location" -Value $azureVirtualNetworkDetails_Iterator.Location
				$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name "VNETName" -Value $azureVirtualNetworkDetails_Iterator.Name
				#$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name "AddressSpace" -Value $azureVirtualNetworkDetails_Iterator.AddressSpace.AddressPrefixes
				
				
				
				#$VirtualNetworkWorksheet.Cells.Item($row_counter,$column_counter++) = $azureVirtualNetworkDetails[$vnet_iterator].DhcpOptions.ToString()
				
				$subnetPerVNET = $azureVirtualNetworkDetails_Iterator.Subnets
				$subnet_count = 1
				foreach ($subnetPerVNET_Iterator in $subnetPerVNET)
				{
					$subnet_name = "Subnet" + $subnet_count
					$subnet_address_space = "SubnetAddressSpace" + $subnet_count
					$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name $subnet_name -Value $subnetPerVNET_Iterator.Name
					$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name $subnet_address_space -Value $subnetPerVNET_Iterator.AddressPrefix
					$subnet_count += 1
					#$virtual_network_object += $virtual_network_object_temp
					
				}
				
				# Setting the pointer to the next row and first column
				$virtual_network_object += $virtual_network_object_temp
				$Global:virtual_network_object_All += $virtual_network_object_temp
			}
			
			$virtual_network_object | Export-Csv "Virtual_networks_details.csv" -NoTypeInformation -Force
			
			
			
			#####################################################################
			#    Fetching External Load Balancer Details                        #
			#####################################################################
			$richtextbox1.Text += "Fetching External Load Balancer Details" + $Global:NewLine
		
			
			$azure_load_balancer_object = $null
			$azure_load_balancer_object = @()
			
			foreach ($AzureLBList_Iterator in $AzureLBList)
			{
				
				# Populating the cells
				
				$azure_load_balancer_object_temp = new-object PSObject
				$azure_load_balancer_object_temp | Add-Member -MemberType NoteProperty -Name "Subscription" -Value $global:subscription_Name
				$azure_load_balancer_object_temp | add-member -MemberType NoteProperty -Name "ResourceGroupName" -Value $AzureLBList_Iterator.ResourceGroupName
				$azure_load_balancer_object_temp | add-member -MemberType NoteProperty -Name "Name" -Value $AzureLBList_Iterator.Name
				$azure_load_balancer_object_temp | add-member -MemberType NoteProperty -Name "Location" -Value $AzureLBList_Iterator.Location
				$azure_load_balancer_object_temp | add-member -MemberType NoteProperty -Name "FrontendIpConfigurationsName" -Value $AzureLBList_Iterator.FrontendIpConfigurations.name
				$azure_load_balancer_object_temp | add-member -MemberType NoteProperty -Name "BackendAddressPoolsName" -Value $AzureLBList_Iterator.BackendAddressPools.name
				
				
				# Back End VM List
				$AzureLBBackendPoolVMs = $AzureLBList_Iterator.BackendAddressPools.BackendIpConfigurations
				
				$aa
				# Proceed only if $ExternalLBBackendPoolVMs array has data.
				if ($AzureLBBackendPoolVMs.count -ne $NULL)
				{
					
					$AzureLBBackendPoolVMsID_count = 1
					foreach ($AzureLBBackendPoolVMs_Iterator in $AzureLBBackendPoolVMs)
					{
						#$column_counter = 6
						
						if ($null -eq $AzureLBBackendPoolVMs_Iterator)
						{
							
							continue
							
						}
						
						$AzureLBBackendPoolVMsID_name = "AzureLBBackendPoolVMsID" + $AzureLBBackendPoolVMsID_count
						$azure_load_balancer_object_temp | add-member -MemberType NoteProperty -Name $AzureLBBackendPoolVMsID_name -Value $AzureLBBackendPoolVMs_Iterator.id
						$AzureLBBackendPoolVMsID_count += 1
					}
					
				}
				
				$azure_load_balancer_object += $azure_load_balancer_object_temp
				$Global:azure_load_balancer_object_ALL += $azure_load_balancer_object_temp
			}
			
			$azure_load_balancer_object | Export-Csv "Azure_Load_Balancer_details.csv" -NoTypeInformation -Force
			
		}
		
		
		
		###########################################################
		###############  COLLECTION   #############################
		###########################################################
		
		$working_directory = "E:\AzureInventory"
		
		new-item $working_directory -ItemType Directory -Force
		
		
		$richtextbox1.Text = "Fetching the IaaS inventory list for each subscription" + $Global:NewLine
		
		foreach ($subscription_list_iterator in $Global:subscription_list)
		{
			$Global:subscription_id = $subscription_list_iterator.id
			$Global:subscription_name = $subscription_list_iterator.name
			Update-ListBox $listbox1 $subscription_name
			
			
			if ($subscription_list_iterator.State -ne "Disabled")
			{
				Get-AzureInventory($Global:subscription_id)
			}
			
		}
		
	}
	
	
	$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		if($datagridviewResults.DataSource -is [System.Data.DataTable])
		{
			$column = $datagridviewResults.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			{
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}
	
			$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
		}
	}
	
	$buttonAuthenticate_Click = {
		
		function Invoke-GetAzureInventoryFunction
		{
			
			# Sign into Azure Portal
			login-azurermaccount
			
			# Fetching subscription list
			$Global:subscription_list = get-azurermsubscription
			Update-ListBox $listbox1 $Global:subscription_list
			
			
		}
		
		if (!$checkboxAuto.Checked)
		{
			Invoke-GetAzureInventoryFunction
		}
		else
		{   #######################################################################################################################
			### To-Do	Create an APP - Store Password in file runOnce
			### TO-DO	Create a certificate based sign on 
			######################################################################################################################
			
			
			$applicationId = "02e79480-acfb-4284-ac9e-7caaa8b244e8";
			$securePassword = "z5KMwA3DmvoeeSCvzoocvq5pHi78gsFR+0iKoSDvHZk=" | ConvertTo-SecureString -AsPlainText -Force
			$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $applicationId, $securePassword
			Connect-AzureRmAccount -ServicePrincipal -Credential $credential -TenantId "92832cfc-349a-4b12-af77-765b6f10b51f"
			
			# Fetching subscription list
			$Global:subscription_list = get-azurermsubscription
			$richtextbox1.Text = "Authenticated using Service Principal (ReadOnly)" + $Global:NewLine
			Update-ListBox $listbox1 $Global:subscription_list
			
			
			#https://social.technet.microsoft.com/wiki/contents/articles/40062.automating-azure-login-for-powershell-scripts-using-service-principal.aspx	
		}
		
	}
	
	########################## VIEW SELECTOR #########################
	$buttonRefreshView_Click = {
		#$Global:azure_load_balancer_object_ALL 
		#$Global:virtual_network_object_All
		#$Global:storage_account_object_All
		#$Global:network_security_groups_object_All
		#$global:virtual_machine_object_All
		
		if ($radiobuttonVM.Checked){Update-DataGridView -DataGridView $datagridviewResults -Item $Global:virtual_machine_object_All -AutoSizeColumns DisplayedCells}
		If ($radiobuttonLoadBalancer.checked){Update-DataGridView -DataGridView $datagridviewResults -Item $Global:azure_load_balancer_object_ALL  -AutoSizeColumns DisplayedCells}
		If ($radiobuttonnsg.checked){Update-DataGridView -DataGridView $datagridviewResults -Item $Global:network_security_groups_object_All -AutoSizeColumns DisplayedCells}
		If ($radiobuttonStorageAccount.checked) { Update-DataGridView -DataGridView $datagridviewResults -Item $Global:storage_account_object_All -AutoSizeColumns DisplayedCells }
		
		
		$table1 = ConvertTo-DataTable -InputObject $Global:virtual_network_object_All
		If ($radiobuttonVNet.checked) { Update-DataGridView -DataGridView $datagridviewResults -Item $table1  }
		#https://www.sapien.com/blog/2015/01/19/creating-a-gui-for-csv-data/
	}
	
	
	$listbox1_SelectedIndexChanged={
		
	}
	
	
	$buttonExit_Click = {
		$formMain.Close()
		
	}
	
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formMain.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonRefreshView.remove_Click($buttonRefreshView_Click)
			$buttonAuthenticate.remove_Click($buttonAuthenticate_Click)
			$listbox1.remove_SelectedIndexChanged($listbox1_SelectedIndexChanged)
			$datagridviewResults.remove_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
			$buttonExit.remove_Click($buttonExit_Click)
			$buttonCollectInventory.remove_Click($buttonCollectInventory_Click)
			$formMain.remove_Load($formMain_Load)
			$formMain.remove_Load($Form_StateCorrection_Load)
			$formMain.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formMain.SuspendLayout()
	#
	# formMain
	#
	$formMain.Controls.Add($radiobuttonRSV)
	$formMain.Controls.Add($buttonRefreshView)
	$formMain.Controls.Add($radiobuttonStorageAccount)
	$formMain.Controls.Add($radiobuttonLoadBalancer)
	$formMain.Controls.Add($radiobuttonResourceGroup)
	$formMain.Controls.Add($radiobuttonNSG)
	$formMain.Controls.Add($radiobuttonVM)
	$formMain.Controls.Add($radiobuttonVNet)
	$formMain.Controls.Add($checkboxAuto)
	$formMain.Controls.Add($textbox3)
	$formMain.Controls.Add($textbox2)
	$formMain.Controls.Add($textbox1)
	$formMain.Controls.Add($richtextbox1)
	$formMain.Controls.Add($buttonUpdateInventoryDatab)
	$formMain.Controls.Add($buttonImportToSCSM)
	$formMain.Controls.Add($buttonAuthenticate)
	$formMain.Controls.Add($listbox1)
	$formMain.Controls.Add($datagridviewResults)
	$formMain.Controls.Add($buttonExit)
	$formMain.Controls.Add($buttonCollectInventory)
	$formMain.AutoScaleDimensions = '7, 13'
	$formMain.AutoScaleMode = 'Font'
	$formMain.ClientSize = '1267, 591'
	$formMain.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$formMain.Margin = '4, 3, 4, 3'
	$formMain.Name = 'formMain'
	$formMain.StartPosition = 'CenterScreen'
	$formMain.Text = 'DTEK-AZURE-RESOURCE-COLLECTOR'
	$formMain.add_Load($formMain_Load)
	#
	# radiobuttonRSV
	#
	$radiobuttonRSV.Location = '611, 67'
	$radiobuttonRSV.Name = 'radiobuttonRSV'
	$radiobuttonRSV.Size = '104, 24'
	$radiobuttonRSV.TabIndex = 19
	$radiobuttonRSV.TabStop = $True
	$radiobuttonRSV.Text = 'RSV'
	$radiobuttonRSV.UseCompatibleTextRendering = $True
	$radiobuttonRSV.UseVisualStyleBackColor = $True
	#
	# buttonRefreshView
	#
	$buttonRefreshView.Location = '748, 66'
	$buttonRefreshView.Name = 'buttonRefreshView'
	$buttonRefreshView.Size = '133, 23'
	$buttonRefreshView.TabIndex = 18
	$buttonRefreshView.Text = '&Refresh View'
	$buttonRefreshView.UseCompatibleTextRendering = $True
	$buttonRefreshView.UseVisualStyleBackColor = $True
	$buttonRefreshView.add_Click($buttonRefreshView_Click)
	#
	# radiobuttonStorageAccount
	#
	$radiobuttonStorageAccount.Location = '485, 67'
	$radiobuttonStorageAccount.Name = 'radiobuttonStorageAccount'
	$radiobuttonStorageAccount.Size = '120, 24'
	$radiobuttonStorageAccount.TabIndex = 17
	$radiobuttonStorageAccount.TabStop = $True
	$radiobuttonStorageAccount.Text = 'Storage Account'
	$radiobuttonStorageAccount.UseCompatibleTextRendering = $True
	$radiobuttonStorageAccount.UseVisualStyleBackColor = $True
	#
	# radiobuttonLoadBalancer
	#
	$radiobuttonLoadBalancer.Cursor = 'Default'
	$radiobuttonLoadBalancer.Location = '375, 67'
	$radiobuttonLoadBalancer.Name = 'radiobuttonLoadBalancer'
	$radiobuttonLoadBalancer.Size = '104, 24'
	$radiobuttonLoadBalancer.TabIndex = 16
	$radiobuttonLoadBalancer.TabStop = $True
	$radiobuttonLoadBalancer.Text = 'Load Balancer'
	$radiobuttonLoadBalancer.UseCompatibleTextRendering = $True
	$radiobuttonLoadBalancer.UseVisualStyleBackColor = $True
	#
	# radiobuttonResourceGroup
	#
	$radiobuttonResourceGroup.Location = '252, 67'
	$radiobuttonResourceGroup.Name = 'radiobuttonResourceGroup'
	$radiobuttonResourceGroup.Size = '117, 24'
	$radiobuttonResourceGroup.TabIndex = 15
	$radiobuttonResourceGroup.TabStop = $True
	$radiobuttonResourceGroup.Text = '&Resource Group'
	$radiobuttonResourceGroup.UseCompatibleTextRendering = $True
	$radiobuttonResourceGroup.UseVisualStyleBackColor = $True
	#
	# radiobuttonNSG
	#
	$radiobuttonNSG.Location = '183, 67'
	$radiobuttonNSG.Name = 'radiobuttonNSG'
	$radiobuttonNSG.Size = '104, 24'
	$radiobuttonNSG.TabIndex = 14
	$radiobuttonNSG.TabStop = $True
	$radiobuttonNSG.Text = 'NSG'
	$radiobuttonNSG.UseCompatibleTextRendering = $True
	$radiobuttonNSG.UseVisualStyleBackColor = $True
	#
	# radiobuttonVM
	#
	$radiobuttonVM.Location = '113, 67'
	$radiobuttonVM.Name = 'radiobuttonVM'
	$radiobuttonVM.Size = '104, 24'
	$radiobuttonVM.TabIndex = 13
	$radiobuttonVM.TabStop = $True
	$radiobuttonVM.Text = 'VM'
	$radiobuttonVM.UseCompatibleTextRendering = $True
	$radiobuttonVM.UseVisualStyleBackColor = $True
	#
	# radiobuttonVNet
	#
	$radiobuttonVNet.Location = '36, 68'
	$radiobuttonVNet.Name = 'radiobuttonVNet'
	$radiobuttonVNet.Size = '104, 24'
	$radiobuttonVNet.TabIndex = 12
	$radiobuttonVNet.TabStop = $True
	$radiobuttonVNet.Text = 'VNet'
	$radiobuttonVNet.UseCompatibleTextRendering = $True
	$radiobuttonVNet.UseVisualStyleBackColor = $True
	#
	# checkboxAuto
	#
	$checkboxAuto.Location = '140, 23'
	$checkboxAuto.Name = 'checkboxAuto'
	$checkboxAuto.Size = '48, 24'
	$checkboxAuto.TabIndex = 11
	$checkboxAuto.Text = 'Auto'
	$checkboxAuto.UseCompatibleTextRendering = $True
	$checkboxAuto.UseVisualStyleBackColor = $True
	#
	# textbox3
	#
	$textbox3.Location = '1203, 13'
	$textbox3.Multiline = $True
	$textbox3.Name = 'textbox3'
	$textbox3.Size = '46, 43'
	$textbox3.TabIndex = 10
	#
	# textbox2
	#
	$textbox2.Location = '919, 12'
	$textbox2.Multiline = $True
	$textbox2.Name = 'textbox2'
	$textbox2.Size = '46, 43'
	$textbox2.TabIndex = 9
	#
	# textbox1
	#
	$textbox1.Location = '677, 12'
	$textbox1.Multiline = $True
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '46, 43'
	$textbox1.TabIndex = 8
	#
	# richtextbox1
	#
	$richtextbox1.BackColor = 'WindowText'
	$richtextbox1.ForeColor = 'Lime'
	$richtextbox1.Location = '14, 483'
	$richtextbox1.Name = 'richtextbox1'
	$richtextbox1.Size = '775, 96'
	$richtextbox1.TabIndex = 7
	$richtextbox1.Text = ''
	#
	# buttonUpdateInventoryDatab
	#
	$buttonUpdateInventoryDatab.Location = '738, 12'
	$buttonUpdateInventoryDatab.Name = 'buttonUpdateInventoryDatab'
	$buttonUpdateInventoryDatab.Size = '175, 43'
	$buttonUpdateInventoryDatab.TabIndex = 6
	$buttonUpdateInventoryDatab.Text = '&Update Inventory Database'
	$buttonUpdateInventoryDatab.UseCompatibleTextRendering = $True
	$buttonUpdateInventoryDatab.UseVisualStyleBackColor = $True
	#
	# buttonImportToSCSM
	#
	$buttonImportToSCSM.Location = '991, 13'
	$buttonImportToSCSM.Name = 'buttonImportToSCSM'
	$buttonImportToSCSM.Size = '206, 43'
	$buttonImportToSCSM.TabIndex = 5
	$buttonImportToSCSM.Text = '&Import to SCSM'
	$buttonImportToSCSM.UseCompatibleTextRendering = $True
	$buttonImportToSCSM.UseVisualStyleBackColor = $True
	#
	# buttonAuthenticate
	#
	$buttonAuthenticate.Location = '12, 14'
	$buttonAuthenticate.Name = 'buttonAuthenticate'
	$buttonAuthenticate.Size = '122, 41'
	$buttonAuthenticate.TabIndex = 4
	$buttonAuthenticate.Text = '&Authenticate'
	$buttonAuthenticate.UseCompatibleTextRendering = $True
	$buttonAuthenticate.UseVisualStyleBackColor = $True
	$buttonAuthenticate.add_Click($buttonAuthenticate_Click)
	#
	# listbox1
	#
	$listbox1.BackColor = 'MenuText'
	$listbox1.ForeColor = 'Yellow'
	$listbox1.FormattingEnabled = $True
	$listbox1.Location = '194, 12'
	$listbox1.Name = 'listbox1'
	$listbox1.Size = '326, 43'
	$listbox1.TabIndex = 3
	$listbox1.add_SelectedIndexChanged($listbox1_SelectedIndexChanged)
	#
	# datagridviewResults
	#
	$datagridviewResults.AllowUserToAddRows = $False
	$datagridviewResults.AllowUserToDeleteRows = $False
	$datagridviewResults.Anchor = 'Top, Bottom, Left, Right'
	$datagridviewResults.Location = '14, 98'
	$datagridviewResults.Margin = '4, 3, 4, 3'
	$datagridviewResults.Name = 'datagridviewResults'
	$datagridviewResults.ReadOnly = $True
	$datagridviewResults.Size = '1239, 379'
	$datagridviewResults.TabIndex = 2
	$datagridviewResults.add_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Bottom, Right'
	$buttonExit.Location = '1133, 526'
	$buttonExit.Margin = '4, 3, 4, 3'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '120, 53'
	$buttonExit.TabIndex = 1
	$buttonExit.Text = 'E&xit'
	$buttonExit.UseCompatibleTextRendering = $True
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	#
	# buttonCollectInventory
	#
	$buttonCollectInventory.Anchor = 'Bottom, Left'
	$buttonCollectInventory.Location = '527, 12'
	$buttonCollectInventory.Margin = '4, 3, 4, 3'
	$buttonCollectInventory.Name = 'buttonCollectInventory'
	$buttonCollectInventory.Size = '143, 43'
	$buttonCollectInventory.TabIndex = 0
	$buttonCollectInventory.Text = '&Collect Inventory'
	$buttonCollectInventory.UseCompatibleTextRendering = $True
	$buttonCollectInventory.UseVisualStyleBackColor = $True
	$buttonCollectInventory.add_Click($buttonCollectInventory_Click)
	#
	# checkboxCheckbox1
	#
	$checkboxCheckbox1.Location = '30, 73'
	$checkboxCheckbox1.Name = 'checkboxCheckbox1'
	$checkboxCheckbox1.Size = '104, 24'
	$checkboxCheckbox1.TabIndex = 11
	$checkboxCheckbox1.Text = 'checkbox1'
	$checkboxCheckbox1.UseCompatibleTextRendering = $True
	$checkboxCheckbox1.UseVisualStyleBackColor = $True
	$formMain.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formMain.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formMain.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formMain.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formMain.ShowDialog()

} #End Function

#Call the form
Show-DTEK-AZURE-RESOURCE-COLLECTOR_psf | Out-Null
