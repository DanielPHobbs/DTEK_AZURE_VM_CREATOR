#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 5d4ffab2-a0b9-42fd-a4cc-3ee7484bff51
# Source File: E:\GIT-LOCAL-REPOSITORIES\DTEK_AZURE_VM_CREATOR\DTEK_AZURE_VM_CREATOR\DTEK-AZURE-RESOURCE-COLLECTOR.psf
#------------------------------------------------------------------------

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2019 v5.6.159
     Generated on:       23/02/2019 12:25
     Generated by:       danny
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2019
#>


#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-DTEK-AZURE-RESOURCE-COLLECTOR_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formMain = New-Object 'System.Windows.Forms.Form'
	$checkboxAuto = New-Object 'System.Windows.Forms.CheckBox'
	$textbox3 = New-Object 'System.Windows.Forms.TextBox'
	$textbox2 = New-Object 'System.Windows.Forms.TextBox'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$buttonUpdateInventoryDatab = New-Object 'System.Windows.Forms.Button'
	$buttonImportToSCSM = New-Object 'System.Windows.Forms.Button'
	$buttonEnterCredentials = New-Object 'System.Windows.Forms.Button'
	$listbox1 = New-Object 'System.Windows.Forms.ListBox'
	$datagridviewResults = New-Object 'System.Windows.Forms.DataGridView'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$buttonCollectInventory = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	#region Control Helper Functions
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ListBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
		{
			$ListBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ListBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ListBox.Items.Add($obj)
			}
			$ListBox.EndUpdate()
		}
		else
		{
			$ListBox.Items.Add($Items)
		}
		
		$ListBox.DisplayMember = $DisplayMember
		$ListBox.ValueMember = $ValueMember
	}
	
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($null -eq $Item)
		{
			$DataGridView.DataSource = $null
		}
		elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($null -eq $InputObject)
		{
			$Table.Clear()
			return @( ,$Table)
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	#endregion
	################################################################################
	#########################   INIT LOAD ##########################################
	################################################################################
	$formMain_Load={
		$Global:Now = Get-date
		$Global:NewLine = "`r`n"
		
		$virtual_machine_object_All = @()
		
		
		#$checkboxAuto.Checked=$true
		
		################functions ################
		
		Function global:AppendLog ([string]$Message)
		{
			$script:CurrentAction = $Message
			$script:TraceLog += ((Get-Date).ToString() + "`t" + $Message + " `r`n")
		}
		
		
	}
	
	###############################################################################
	####################### COLLECT DATA ##########################################
	###############################################################################
	
	$buttonCollectInventory_Click= {
		
		
		function Get-AzureInventory
		{
			
			Param (
				[String]$Global:subscription_id
			)
			
			# Selecting the subscription
			Select-AzureRmSubscription -Subscription $Global:subscription_id
			
			
			
			# Create a new directory with the subscription name
			$path_to_store_inventory_csv_files = "E:\AzureInventory\" + $Global:subscription_id
			
			$richtextbox1.Text += "Fetching Artifacts from $Global:subscription_id" + $Global:NewLine
			
			# Fetch the Virtual Machines from the subscription
			$azureVMDetails = get-azurermvm
			
			# Fetch the NIC details from the subscription
			$azureNICDetails = Get-AzureRmNetworkInterface
			
			# Fetch the Storage Accounts from the subscription
			$azureStorageAccountDetails = Get-AzureRmStorageAccount
			
			# Fetch the Virtual Networks from the subscription
			$azureVirtualNetworkDetails = Get-AzureRmVirtualNetwork
			
			# Fetch the NSG rules from the subscription
			$azureNSGDetails = Get-AzureRmNetworkSecurityGroup
			
			# Fetch the Azure load balancer details
			$AzureLBList = Get-AzureRmLoadBalancer
			
			# Create a new directory with the subscription name
			new-item $path_to_store_inventory_csv_files -ItemType Directory -Force
			
			# Change the directory location to store the CSV files
			Set-Location -Path $path_to_store_inventory_csv_files
			
			
			#####################################################################
			#    Fetching Virtual Machine Details                               #
			#####################################################################
			
			$richtextbox1.Text += "Fetching Virtual Machine Details" + $Global:NewLine
			
			$virtual_machine_object = $null
			$virtual_machine_object = @()
			
			
			# Iterating over the Virtual Machines under the subscription
			
			foreach ($azureVMDetails_Iterator in $azureVMDetails)
			{
				
				# Fetching the satus
				$vm_status = get-azurermvm -ResourceGroupName $azureVMDetails_Iterator.resourcegroupname -name $azureVMDetails_Iterator.name -Status
				
				#Fetching the private IP
				foreach ($azureNICDetails_iterator in $azureNICDetails)
				{
					if ($azureNICDetails_iterator.Id -eq $azureVMDetails_Iterator.NetworkProfile.NetworkInterfaces.id)
					{
						#write-Host $vm.NetworkInterfaceIDs
						$private_ip_address = $azureNICDetails_iterator.IpConfigurations.privateipaddress
					}
				}
				
				#Fetching data disk names
				$data_disks = $azureVMDetails_Iterator.StorageProfile.DataDisks
				$data_disk_name_list = ''
	        <#
	        if($data_disks.Count -eq 0){
	            $data_disk_name_list = "No Data Disk Attached"
	            #write-host $data_disk_name_list
	        }elseif($data_disks.Count -ge 1) {
	
	        #>
				foreach ($data_disks_iterator in $data_disks)
				{
					$data_disk_name_list_temp = $data_disk_name_list + "; " + $data_disks_iterator.name
					#Trimming the first three characters which contain --> " ; "
					$data_disk_name_list = $data_disk_name_list_temp.Substring(2)
					#write-host $data_disk_name_list
				}
				
				#}
				
				
				
				# Fetching OS Details (Managed / un-managed)
				
				if ($azureVMDetails_Iterator.StorageProfile.OsDisk.manageddisk -eq $null)
				{
					# This is un-managed disk. It has VHD property
					
					$os_disk_details_unmanaged = $azureVMDetails_Iterator.StorageProfile.OsDisk.Vhd.Uri
					$os_disk_details_managed = "This VM has un-managed OS Disk"
					
				}
				else
				{
					
					$os_disk_details_managed = $azureVMDetails_Iterator.StorageProfile.OsDisk.ManagedDisk.Id
					$os_disk_details_unmanaged = "This VM has Managed OS Disk"
				}
				
				$virtual_machine_object_temp = new-object PSObject
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "SubScription" -Value $global:subscription_id
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "ResourceGroupName" -Value $azureVMDetails_Iterator.ResourceGroupName
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "VMName" -Value $azureVMDetails_Iterator.Name
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "VMStatus" -Value $vm_status.Statuses[1].DisplayStatus
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "Location" -Value $azureVMDetails_Iterator.Location
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "VMSize" -Value $azureVMDetails_Iterator.HardwareProfile.VmSize
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "OSDisk" -Value $azureVMDetails_Iterator.StorageProfile.OsDisk.OsType
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "OSImageType" -Value $azureVMDetails_Iterator.StorageProfile.ImageReference.sku
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "AdminUserName" -Value $azureVMDetails_Iterator.OSProfile.AdminUsername
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "NICId" -Value $azureVMDetails_Iterator.NetworkProfile.NetworkInterfaces.id
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "OSVersion" -Value $azureVMDetails_Iterator.StorageProfile.ImageReference.Sku
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "PrivateIP" -Value $private_ip_address
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "ManagedOSDiskURI" -Value $os_disk_details_managed
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "UnManagedOSDiskURI" -Value $os_disk_details_unmanaged
				$virtual_machine_object_temp | add-member -membertype NoteProperty -name "DataDiskNames" -Value $data_disk_name_list
				
				
				$virtual_machine_object += $virtual_machine_object_temp
				
				$virtual_machine_object_All += $virtual_machine_object_temp
			}
			
			Update-DataGridView -DataGridView $datagridviewResults -Item $virtual_machine_object_All -AutoSizeColumns DisplayedCells
			
			
			$virtual_machine_object | Export-Csv "Virtual_Machine_details.csv" -NoTypeInformation -Force
			
			
			
			############################################################################
			#    Fetching custom Network Security Groups Details                       #
			############################################################################
			
			$richtextbox1.Text += "Fetching custom Network Security Groups Details" + $Global:NewLine
			
			$network_security_groups_object = $null
			$network_security_groups_object = @()
			
			foreach ($azureNSGDetails_Iterator in $azureNSGDetails)
			{
				
				
				
				$securityRulesPerNSG = $azureNSGDetails_Iterator.SecurityRules
				if ($securityRulesPerNSG -eq $null)
				{
					continue
				}
				
				foreach ($securityRulesPerNSG_Iterator in $securityRulesPerNSG)
				{
					
					$network_security_groups_object_temp = new-object PSObject
					
					$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "Name" -Value $securityRulesPerNSG_Iterator.Name
					$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "Priority" -Value $securityRulesPerNSG_Iterator.Priority
					$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "Protocol" -Value $securityRulesPerNSG_Iterator.Protocol
					$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "Direction" -Value $securityRulesPerNSG_Iterator.Direction
					$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "SourcePortRange" -Value ($securityRulesPerNSG_Iterator | Select-Object @{ Name = "SourcePortRange"; Expression = { $_.SourcePortRange } })
					$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "DestinationPortRange" -Value ($securityRulesPerNSG_Iterator | Select-Object @{ Name = "DestinationPortRange"; Expression = { $_.DestinationPortRange } })
					$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "SourceAddressPrefix" -Value ($securityRulesPerNSG_Iterator | Select-Object @{ Name = "SourceAddressPrefix"; Expression = { $_.SourceAddressPrefix } })
					$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "DestinationAddressPrefix" -Value ($securityRulesPerNSG_Iterator | Select-Object @{ Name = "DestinationAddressPrefix"; Expression = { $_.DestinationAddressPrefix } })
					$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "Access" -Value $securityRulesPerNSG_Iterator.Access
					
					$network_security_groups_object += $network_security_groups_object_temp
				}
				
				# Setting the pointer to the next row and first column
				
				
			}
			
			if ($network_security_groups_object -ne $null)
			{
				$network_security_groups_object | Export-Csv "nsg_custom_rules_details.csv" -NoTypeInformation -Force
			}
			
			
			
			
			#####################################################################
			#    Fetching Storage Account Details                               #
			#####################################################################
			
			$richtextbox1.Text += "Fetching Storage Account Details" + $Global:NewLine
			
			
			$storage_account_object = $null
			$storage_account_object = @()
			
			foreach ($azureStorageAccountDetails_Iterator in $azureStorageAccountDetails)
			{
				
				# Populating the cells
				
				$storage_account_object_temp = new-object PSObject
				
				$storage_account_object_temp | add-member -MemberType NoteProperty -Name "ResourceGroupName" -Value $azureStorageAccountDetails_Iterator.ResourceGroupName
				$storage_account_object_temp | add-member -MemberType NoteProperty -Name "StorageAccountName" -Value $azureStorageAccountDetails_Iterator.StorageAccountName
				$storage_account_object_temp | add-member -MemberType NoteProperty -Name "Location" -Value $azureStorageAccountDetails_Iterator.Location
				$storage_account_object_temp | add-member -MemberType NoteProperty -Name "StorageTier" -Value $azureStorageAccountDetails_Iterator.Sku.Tier
				$storage_account_object_temp | add-member -MemberType NoteProperty -Name "ReplicationType" -Value $azureStorageAccountDetails_Iterator.Sku.Name
				
				
				
				# Setting the pointer to the next row and first column
				$storage_account_object += $storage_account_object_temp
			}
			
			$storage_account_object | Export-Csv "Storage_Account_Details.csv" -NoTypeInformation -Force
			
			
			
			#####################################################################
			#    Fetching Virtual Network Details                               #
			#####################################################################
			$richtextbox1.Text += "Fetching Virtual Network Details" + $Global:NewLine
			
			$virtual_network_object = $null
			$virtual_network_object = @()
			
			foreach ($azureVirtualNetworkDetails_Iterator in $azureVirtualNetworkDetails)
			{
				
				$virtual_network_object_temp = New-Object PSObject
				
				# Populating the cells
				
				$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name "ResourceGroupName" -Value $azureVirtualNetworkDetails_Iterator.ResourceGroupName
				$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name "Location" -Value $azureVirtualNetworkDetails_Iterator.Location
				$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name "VNETName" -Value $azureVirtualNetworkDetails_Iterator.Name
				#$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name "AddressSpace" -Value $azureVirtualNetworkDetails_Iterator.AddressSpace.AddressPrefixes
				
				
				
				#$VirtualNetworkWorksheet.Cells.Item($row_counter,$column_counter++) = $azureVirtualNetworkDetails[$vnet_iterator].DhcpOptions.ToString()
				
				$subnetPerVNET = $azureVirtualNetworkDetails_Iterator.Subnets
				$subnet_count = 1
				foreach ($subnetPerVNET_Iterator in $subnetPerVNET)
				{
					$subnet_name = "Subnet" + $subnet_count
					$subnet_address_space = "SubnetAddressSpace" + $subnet_count
					$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name $subnet_name -Value $subnetPerVNET_Iterator.Name
					$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name $subnet_address_space -Value $subnetPerVNET_Iterator.AddressPrefix
					$subnet_count += 1
					#$virtual_network_object += $virtual_network_object_temp
					
				}
				
				# Setting the pointer to the next row and first column
				$virtual_network_object += $virtual_network_object_temp
			}
			
			$virtual_network_object | Export-Csv "Virtual_networks_details.csv" -NoTypeInformation -Force
			
			
			
			#####################################################################
			#    Fetching External Load Balancer Details                        #
			#####################################################################
			$richtextbox1.Text += "Fetching External Load Balancer Details" + $Global:NewLine
		
			
			$azure_load_balancer_object = $null
			$azure_load_balancer_object = @()
			
			foreach ($AzureLBList_Iterator in $AzureLBList)
			{
				
				# Populating the cells
				
				$azure_load_balancer_object_temp = new-object PSObject
				
				$azure_load_balancer_object_temp | add-member -MemberType NoteProperty -Name "ResourceGroupName" -Value $AzureLBList_Iterator.ResourceGroupName
				$azure_load_balancer_object_temp | add-member -MemberType NoteProperty -Name "Name" -Value $AzureLBList_Iterator.Name
				$azure_load_balancer_object_temp | add-member -MemberType NoteProperty -Name "Location" -Value $AzureLBList_Iterator.Location
				$azure_load_balancer_object_temp | add-member -MemberType NoteProperty -Name "FrontendIpConfigurationsName" -Value $AzureLBList_Iterator.FrontendIpConfigurations.name
				$azure_load_balancer_object_temp | add-member -MemberType NoteProperty -Name "BackendAddressPoolsName" -Value $AzureLBList_Iterator.BackendAddressPools.name
				
				
				# Back End VM List
				$AzureLBBackendPoolVMs = $AzureLBList_Iterator.BackendAddressPools.BackendIpConfigurations
				
				$aa
				# Proceed only if $ExternalLBBackendPoolVMs array has data.
				if ($AzureLBBackendPoolVMs.count -ne $NULL)
				{
					
					$AzureLBBackendPoolVMsID_count = 1
					foreach ($AzureLBBackendPoolVMs_Iterator in $AzureLBBackendPoolVMs)
					{
						#$column_counter = 6
						
						if ($null -eq $AzureLBBackendPoolVMs_Iterator)
						{
							
							continue
							
						}
						
						$AzureLBBackendPoolVMsID_name = "AzureLBBackendPoolVMsID" + $AzureLBBackendPoolVMsID_count
						$azure_load_balancer_object_temp | add-member -MemberType NoteProperty -Name $AzureLBBackendPoolVMsID_name -Value $AzureLBBackendPoolVMs_Iterator.id
						$AzureLBBackendPoolVMsID_count += 1
					}
					
				}
				
				$azure_load_balancer_object += $azure_load_balancer_object_temp
				
			}
			
			$azure_load_balancer_object | Export-Csv "Azure_Load_Balancer_details.csv" -NoTypeInformation -Force
			
		}
		
		###########################################################
		###############  COLLECTION   #############################
		###########################################################
		
		$working_directory = "E:\AzureInventory"
		
		
		new-item $working_directory -ItemType Directory -Force
		
		$listbox1.Text = $Global:subscription_list
		$richtextbox1.Text = "Fetching the IaaS inventory list for each subscription" + $Global:NewLine
		
		
		
		
		foreach ($subscription_list_iterator in $Global:subscription_list)
		{
			$Global:subscription_id = $subscription_list_iterator.id
			$subscription_name = $subscription_list_iterator.name
			
			if ($subscription_list_iterator.State -ne "Disabled")
			{
				Get-AzureInventory($Global:subscription_id)
			}
			
		}
		
	}
	
	
	$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		if($datagridviewResults.DataSource -is [System.Data.DataTable])
		{
			$column = $datagridviewResults.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			{
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}
	
			$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
		}
	}
	
	$buttonEnterCredentials_Click = {
		
		
		
		
		function Invoke-GetAzureInventoryFunction
		{
			
			# Sign into Azure Portal
			login-azurermaccount
			
			# Fetching subscription list
			$Global:subscription_list = get-azurermsubscription
			
			
			
		}
		
		if (!$checkboxAuto.Checked)
		{
			Invoke-GetAzureInventoryFunction
		}
		else
		{   #######################################################################################################################
			### Create an APP - runOnce
			
			######################################################################################################################
			
			
			
			
			
			read-host -assecurestring | convertfrom-securestring | out-file E:\AzureInventory\mysecurestring.txt
			
			$userId = "applicationId@anielhobbsdtekitinnovation.onmicrosoft.com"
			$password = get-content -Path "E:\AzureInventory\mysecurestring.txt" | ConvertTo-SecureString
			
			#Set the powershell credential object
			$cred = New-Object -TypeName System.Management.Automation.PSCredential($userId, $password)
			
			#log On To Azure Account
			
			Login-AzureRmAccount -Credential $cred -TenantId "92832cfc-349a-4b12-af77-765b6f10b51f"
			
			# Fetching subscription list
			$Global:subscription_list = get-azurermsubscription
			
			
			
			#https://social.technet.microsoft.com/wiki/contents/articles/40062.automating-azure-login-for-powershell-scripts-using-service-principal.aspx	
		}
		
	}
	
	
	$listbox1_SelectedIndexChanged={
		
	}
	
	
	$buttonExit_Click = {
		#TODO: Place custom script here
		$formMain.Close()
	}
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formMain.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonEnterCredentials.remove_Click($buttonEnterCredentials_Click)
			$listbox1.remove_SelectedIndexChanged($listbox1_SelectedIndexChanged)
			$datagridviewResults.remove_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
			$buttonExit.remove_Click($buttonExit_Click)
			$buttonCollectInventory.remove_Click($buttonCollectInventory_Click)
			$formMain.remove_Load($formMain_Load)
			$formMain.remove_Load($Form_StateCorrection_Load)
			$formMain.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formMain.SuspendLayout()
	#
	# formMain
	#
	$formMain.Controls.Add($checkboxAuto)
	$formMain.Controls.Add($textbox3)
	$formMain.Controls.Add($textbox2)
	$formMain.Controls.Add($textbox1)
	$formMain.Controls.Add($richtextbox1)
	$formMain.Controls.Add($buttonUpdateInventoryDatab)
	$formMain.Controls.Add($buttonImportToSCSM)
	$formMain.Controls.Add($buttonEnterCredentials)
	$formMain.Controls.Add($listbox1)
	$formMain.Controls.Add($datagridviewResults)
	$formMain.Controls.Add($buttonExit)
	$formMain.Controls.Add($buttonCollectInventory)
	$formMain.AutoScaleDimensions = '7, 13'
	$formMain.AutoScaleMode = 'Font'
	$formMain.ClientSize = '1267, 556'
	$formMain.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$formMain.Margin = '4, 3, 4, 3'
	$formMain.Name = 'formMain'
	$formMain.StartPosition = 'CenterScreen'
	$formMain.Text = 'DTEK-AZURE-RESOURCE-COLLECTOR'
	$formMain.add_Load($formMain_Load)
	#
	# checkboxAuto
	#
	$checkboxAuto.Location = '140, 23'
	$checkboxAuto.Name = 'checkboxAuto'
	$checkboxAuto.Size = '48, 24'
	$checkboxAuto.TabIndex = 11
	$checkboxAuto.Text = 'Auto'
	$checkboxAuto.UseCompatibleTextRendering = $True
	$checkboxAuto.UseVisualStyleBackColor = $True
	#
	# textbox3
	#
	$textbox3.Location = '1203, 13'
	$textbox3.Multiline = $True
	$textbox3.Name = 'textbox3'
	$textbox3.Size = '46, 43'
	$textbox3.TabIndex = 10
	#
	# textbox2
	#
	$textbox2.Location = '919, 12'
	$textbox2.Multiline = $True
	$textbox2.Name = 'textbox2'
	$textbox2.Size = '46, 43'
	$textbox2.TabIndex = 9
	#
	# textbox1
	#
	$textbox1.Location = '677, 12'
	$textbox1.Multiline = $True
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '46, 43'
	$textbox1.TabIndex = 8
	#
	# richtextbox1
	#
	$richtextbox1.BackColor = 'WindowText'
	$richtextbox1.ForeColor = 'Lime'
	$richtextbox1.Location = '12, 448'
	$richtextbox1.Name = 'richtextbox1'
	$richtextbox1.Size = '775, 96'
	$richtextbox1.TabIndex = 7
	$richtextbox1.Text = ''
	#
	# buttonUpdateInventoryDatab
	#
	$buttonUpdateInventoryDatab.Location = '738, 12'
	$buttonUpdateInventoryDatab.Name = 'buttonUpdateInventoryDatab'
	$buttonUpdateInventoryDatab.Size = '175, 43'
	$buttonUpdateInventoryDatab.TabIndex = 6
	$buttonUpdateInventoryDatab.Text = '&Update Inventory Database'
	$buttonUpdateInventoryDatab.UseCompatibleTextRendering = $True
	$buttonUpdateInventoryDatab.UseVisualStyleBackColor = $True
	#
	# buttonImportToSCSM
	#
	$buttonImportToSCSM.Location = '991, 13'
	$buttonImportToSCSM.Name = 'buttonImportToSCSM'
	$buttonImportToSCSM.Size = '206, 43'
	$buttonImportToSCSM.TabIndex = 5
	$buttonImportToSCSM.Text = '&Import to SCSM'
	$buttonImportToSCSM.UseCompatibleTextRendering = $True
	$buttonImportToSCSM.UseVisualStyleBackColor = $True
	#
	# buttonEnterCredentials
	#
	$buttonEnterCredentials.Location = '12, 14'
	$buttonEnterCredentials.Name = 'buttonEnterCredentials'
	$buttonEnterCredentials.Size = '122, 41'
	$buttonEnterCredentials.TabIndex = 4
	$buttonEnterCredentials.Text = '&Enter Credentials'
	$buttonEnterCredentials.UseCompatibleTextRendering = $True
	$buttonEnterCredentials.UseVisualStyleBackColor = $True
	$buttonEnterCredentials.add_Click($buttonEnterCredentials_Click)
	#
	# listbox1
	#
	$listbox1.BackColor = 'MenuText'
	$listbox1.ForeColor = 'Yellow'
	$listbox1.FormattingEnabled = $True
	$listbox1.Location = '194, 12'
	$listbox1.Name = 'listbox1'
	$listbox1.Size = '326, 43'
	$listbox1.TabIndex = 3
	$listbox1.add_SelectedIndexChanged($listbox1_SelectedIndexChanged)
	#
	# datagridviewResults
	#
	$datagridviewResults.AllowUserToAddRows = $False
	$datagridviewResults.AllowUserToDeleteRows = $False
	$datagridviewResults.Anchor = 'Top, Bottom, Left, Right'
	$datagridviewResults.Location = '14, 63'
	$datagridviewResults.Margin = '4, 3, 4, 3'
	$datagridviewResults.Name = 'datagridviewResults'
	$datagridviewResults.ReadOnly = $True
	$datagridviewResults.Size = '1239, 379'
	$datagridviewResults.TabIndex = 2
	$datagridviewResults.add_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Bottom, Right'
	$buttonExit.Location = '1133, 491'
	$buttonExit.Margin = '4, 3, 4, 3'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '120, 53'
	$buttonExit.TabIndex = 1
	$buttonExit.Text = 'E&xit'
	$buttonExit.UseCompatibleTextRendering = $True
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	#
	# buttonCollectInventory
	#
	$buttonCollectInventory.Anchor = 'Bottom, Left'
	$buttonCollectInventory.Location = '527, 12'
	$buttonCollectInventory.Margin = '4, 3, 4, 3'
	$buttonCollectInventory.Name = 'buttonCollectInventory'
	$buttonCollectInventory.Size = '143, 43'
	$buttonCollectInventory.TabIndex = 0
	$buttonCollectInventory.Text = '&Collect Inventory'
	$buttonCollectInventory.UseCompatibleTextRendering = $True
	$buttonCollectInventory.UseVisualStyleBackColor = $True
	$buttonCollectInventory.add_Click($buttonCollectInventory_Click)
	$formMain.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formMain.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formMain.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formMain.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formMain.ShowDialog()

} #End Function

#Call the form
Show-DTEK-AZURE-RESOURCE-COLLECTOR_psf | Out-Null
