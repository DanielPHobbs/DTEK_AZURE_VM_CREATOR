<File version="3.1">
  <FileID>5d4ffab2-a0b9-42fd-a4cc-3ee7484bff51</FileID>
  <LastExport>131955993034065433</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAEGmSURBVHhe7b0JlFXlnbdba90vX/rrtLf7u+v2
d5N7b/dNd6c7Q3fSMTEmsROnxBEHFBUFBARkEpFJBAURcURQEJwYFGSeKaaCGqCKmud5nueJqmIo
ZvB33/8uipSmKgIWaLGfZ61nnXP2vN89vL93n332CQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuEK88IN//ufAWa+8Hjjv
3Q8C585biIiIiD3Qhe8tChw9ZkzgX33724Hn6viu+afvfz9sxbpAZZQ1K9OZUdqEiIiIPdCs8hal
lzRo4rNTda6a7xpr+We6ESLSSrUvpUjhKcWIiIjYmamX4KWMd4njWD0ek1OjqOScLw8ACz9YFJhX
fVgRqaWKTG+3rBM79kdERPShGRfXWI7KKPNsr6C/TJu2zSc6s1z700ouaF42TERqiTef/TZuVpVi
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
xJ4mAeAKeujQIfSpne0PfrGz8rhYO5sufrmdleXF2tl08eqQAHCFbGlp8V6PHDmCPvPQocPnt79p
J9XW1tar1o6Vhq13Q0PjV7Ox8fz0vujVXpYXq+1v7WXTLWXvPNjy5+XelYcPH8avYPuxc8jVra1f
OI9ciq2tdv7pOsR1awDouBI9TVvujuvSndqGKCuvUGxcooKDYxS2L0b7I2MUGeV0rxH7YxQS4gw7
160z3XChoTHa7cbvtD9+Y42KjlVWVu75fa3RVWg5OTnKy8u76szOzlZdXd35c0FObr4KCotVXFx2
yebmFXrTsJNZx+PKpm/zsnl2tix+0/ap4uJibx+zc05efqGz6M/K82K08W06Nr2OZd+V9fX1qq6u
Vk1NDV6E7WXW3NzsbT97zS8o8rR9/5J049q2O3DggDfNzrZXtwUA20FKSkqUmpqqzMxMZWRk9BjT
0tK8g+dyhQArm+bmgxr51NP61W+v0Q//8Rr9z//9Gn3rv12j//7fr9F3vnON/v2X1+in/+I+f/sa
/fX/uEb/7X+7Rn/1V9fo267/t77lhnHD/+JX1+jG66/RNddgT/InP/mJMrNyvP3ALC8vV1JSkgoL
XcVWUHDVWFRUpJSUFFdxWGVtVwIOeiewr8qpU6fPVUKfPz5tHjYvm6fNu7Nl8pMWAqwsrGzsXGZl
dvazz86V4qVx9uxZbzpfdm60CqapqUkJCQlKT0/v9DyLXWt1Znx8vFeHHj161IWBWhUWlerYseNf
yZLSCne+qexy+3VbALCD0ZJ4bm6uysrKVFpa2mNsDy5dpaSvqp30W1oOq+/jQzR3SYBefSpA//7P
AfrePwTo2t8HaMFbAZo9N0CLZgbo//y7ANsQ+uGPAvQ3/8N9/vsAffe7Afr2dwI0dWGAAj9o6489
x+9973ufCwAVFRXKyspSVVWV9/5q0dbHgrQdTx0DgFUiX4Xjx0940+ksANi8bJ5XW1leihYsrTKx
srETvpXZqdOnz5XipXHq1ClvOhcSAKylaZW/tWYrKyvxIrTWvwW4jgGgsqrm3Fa4dGrrGty+cYUC
gFX+lkTbd8aeogUWO3AudwDoN/hJvTI/QKEbAvTm6wEKSQhQcEiA9m4N0Fvu88blLgQsC9BW93ne
AhcMnB+5YfMiAvR3fxWgXz4coDXvdV7J4DfXf/zHf/yzAGCJ3w78zvbHnqqtjzUCrnQAsHlebWV5
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAADAxRMQ8P8DuCgAnoF5DlgAAAAASUVORK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[
#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	$ListBox.DisplayMember = $DisplayMember
	$ListBox.ValueMember = $ValueMember
}

function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)	
}
#endregion
################################################################################
#########################   INIT LOAD ##########################################
################################################################################
$formMain_Load={
	$Global:Now = Get-date
	$Global:NewLine = "`r`n"
	
	#// init Data Arrays
	$Global:virtual_machine_object_All = @()
	$Global:azure_load_balancer_object_ALL = @()
	$Global:virtual_network_object_All = @()
	$Global:storage_account_object_All = @()
	$Global:network_security_groups_object_All = @()
	
	$Global:working_directory = "D:\AzureInventory"
	
	
	<#
	####### Get latest AzureRM module - remove all old 
	
	Get-InstalledModule -Name AzureRM -AllVersions
	Enable-AzureRmAlias 
	
	Install-Module Azurerm –Repository PSGallery –AllowClobber -force
	Get-Module -ListAvailable -Name Az -Refresh
	Find-Module AzureRM
	Get-InstalledModule -Name "Az" -RequiredVersion 1.3.0  | Uninstall-Module
	https://docs.microsoft.com/en-us/powershell/azure/migrate-from-azurerm-to-az?view=azps-1.3.0
	#>
	
	#$checkboxAuto.Checked=$true
	
	################functions ################
	
	Function global:AppendLog ([string]$Message)
	{
		$script:CurrentAction = $Message
		$script:TraceLog += ((Get-Date).ToString() + "`t" + $Message + " `r`n")
	}
	
	
}

###############################################################################
####################### COLLECT DATA ##########################################
###############################################################################

$buttonCollectInventory_Click= {
	
	
	function Get-AzureInventory
	{
		
		Param (
			[String]$Global:subscription_id
		)
		
		# Selecting the subscription
		Select-AzSubscription -Subscription $Global:subscription_id
		
		
		
		# Create a new directory with the subscription name
		$path_to_store_inventory_csv_files = "D:\AzureInventory\" + $Global:subscription_id
		
		$richtextbox1.Text += "Fetching Inventory from $Global:subscription_name" + $Global:NewLine
		
		Try
		{
			# Fetch the RG details from the subscription
			$richtextbox1.Text += "Loading resource groups" + $Global:NewLine
			$azureRGDetails = Get-AzResourceGroup 
			
			# Fetch the NIC details from the subscription
			$richtextbox1.Text += "Loading NIC details" + $Global:NewLine
			 $azureNICDetails = Get-AzNetworkInterface 
			
			# Fetch the Storage Accounts from the subscription
			 $azureStorageAccountDetails = Get-AzStorageAccount 
			
			# Fetch the Virtual Networks from the subscription
			$azureVirtualNetworkDetails = Get-AzVirtualNetwork 
			
			# Fetch the NSG rules from the subscription
			$azureNSGDetails = Get-AzNetworkSecurityGroup 
			
			# Fetch the Azure load balancer details
			 $AzureLBList = Get-AzLoadBalancer 
			
			# Fetch the Virtual Machines from the subscription
			$azureVMDetails = get-azvm 
			
			
			
		}
		catch
		{
			$richtextbox1.Text += "An error occured in fetching data" + $Global:NewLine
			
		}
		
		
		
		
		# Create a new directory with the subscription name
		new-item $path_to_store_inventory_csv_files -ItemType Directory -Force
		
		# Change the directory location to store the CSV files
		Set-Location -Path $path_to_store_inventory_csv_files
		
		
		#####################################################################
		#    Fetching Virtual Machine Details                               #
		#####################################################################
		
		$richtextbox1.Text += "Fetching Virtual Machine Details" + $Global:NewLine
		
		$virtual_machine_object = $null
		$virtual_machine_object = @()
		
		
		# Iterating over the Virtual Machines under the subscription
		
		foreach ($azureVMDetails_Iterator in $azureVMDetails)
		{
			
			# Fetching the satus
			$vm_status = get-azvm -ResourceGroupName $azureVMDetails_Iterator.resourcegroupname -name $azureVMDetails_Iterator.name -Status
			
			#Fetching the private IP
			foreach ($azureNICDetails_iterator in $azureNICDetails)
			{
				if ($azureNICDetails_iterator.Id -eq $azureVMDetails_Iterator.NetworkProfile.NetworkInterfaces.id)
				{
					#write-Host $vm.NetworkInterfaceIDs
					$private_ip_address = $azureNICDetails_iterator.IpConfigurations.privateipaddress
				}
			}
			
			#Fetching data disk names
			$data_disks = $azureVMDetails_Iterator.StorageProfile.DataDisks
			$data_disk_name_list = ''
        <#
        if($data_disks.Count -eq 0){
            $data_disk_name_list = "No Data Disk Attached"
            #write-host $data_disk_name_list
        }elseif($data_disks.Count -ge 1) {

        #>
			foreach ($data_disks_iterator in $data_disks)
			{
				$data_disk_name_list_temp = $data_disk_name_list + "; " + $data_disks_iterator.name
				#Trimming the first three characters which contain --> " ; "
				$data_disk_name_list = $data_disk_name_list_temp.Substring(2)
				#write-host $data_disk_name_list
			}
			
			#}
			
			
			
			# Fetching OS Details (Managed / un-managed)
			
			if ($azureVMDetails_Iterator.StorageProfile.OsDisk.manageddisk -eq $null)
			{
				# This is un-managed disk. It has VHD property
				
				$os_disk_details_unmanaged = $azureVMDetails_Iterator.StorageProfile.OsDisk.Vhd.Uri
				$os_disk_details_managed = "This VM has un-managed OS Disk"
				
			}
			else
			{
				
				$os_disk_details_managed = $azureVMDetails_Iterator.StorageProfile.OsDisk.ManagedDisk.Id
				$os_disk_details_unmanaged = "This VM has Managed OS Disk"
			}
			
			$virtual_machine_object_temp = new-object PSObject
			$virtual_machine_object_temp | add-member -membertype NoteProperty -name "SubScription" -Value $global:subscription_Name
			$virtual_machine_object_temp | add-member -membertype NoteProperty -name "ResourceGroupName" -Value $azureVMDetails_Iterator.ResourceGroupName
			$virtual_machine_object_temp | add-member -membertype NoteProperty -name "VMName" -Value $azureVMDetails_Iterator.Name
			$virtual_machine_object_temp | add-member -membertype NoteProperty -name "VMStatus" -Value $vm_status.Statuses[1].DisplayStatus
			$virtual_machine_object_temp | add-member -membertype NoteProperty -name "Location" -Value $azureVMDetails_Iterator.Location
			$virtual_machine_object_temp | add-member -membertype NoteProperty -name "VMSize" -Value $azureVMDetails_Iterator.HardwareProfile.VmSize
			$virtual_machine_object_temp | add-member -membertype NoteProperty -name "OSDisk" -Value $azureVMDetails_Iterator.StorageProfile.OsDisk.OsType
			$virtual_machine_object_temp | add-member -membertype NoteProperty -name "OSImageType" -Value $azureVMDetails_Iterator.StorageProfile.ImageReference.sku
			$virtual_machine_object_temp | add-member -membertype NoteProperty -name "AdminUserName" -Value $azureVMDetails_Iterator.OSProfile.AdminUsername
			$virtual_machine_object_temp | add-member -membertype NoteProperty -name "NICId" -Value $azureVMDetails_Iterator.NetworkProfile.NetworkInterfaces.id
			$virtual_machine_object_temp | add-member -membertype NoteProperty -name "OSVersion" -Value $azureVMDetails_Iterator.StorageProfile.ImageReference.Sku
			$virtual_machine_object_temp | add-member -membertype NoteProperty -name "PrivateIP" -Value $private_ip_address
			$virtual_machine_object_temp | add-member -membertype NoteProperty -name "ManagedOSDiskURI" -Value $os_disk_details_managed
			$virtual_machine_object_temp | add-member -membertype NoteProperty -name "UnManagedOSDiskURI" -Value $os_disk_details_unmanaged
			$virtual_machine_object_temp | add-member -membertype NoteProperty -name "DataDiskNames" -Value $data_disk_name_list
			
			
			$virtual_machine_object += $virtual_machine_object_temp
			
			##### make vm list append ####
			$global:virtual_machine_object_All += $virtual_machine_object_temp
		}
		
		$virtual_machine_object | Export-Csv "Virtual_Machine_details.csv" -NoTypeInformation -Force
		
		
		
		############################################################################
		#    Fetching custom Network Security Groups Details                       #
		############################################################################
		
		$richtextbox1.Text += "Fetching custom Network Security Groups Details" + $Global:NewLine
		
		$network_security_groups_object = $null
		$network_security_groups_object = @()
		
		foreach ($azureNSGDetails_Iterator in $azureNSGDetails)
		{
			
			
			
			$securityRulesPerNSG = $azureNSGDetails_Iterator.SecurityRules
			if ($securityRulesPerNSG -eq $null)
			{
				continue
			}
			
			foreach ($securityRulesPerNSG_Iterator in $securityRulesPerNSG)
			{
				
				$network_security_groups_object_temp = new-object PSObject
				$network_security_groups_object_temp | Add-Member -MemberType NoteProperty -Name "Subscription" -Value $global:subscription_Name
				$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "Name" -Value $securityRulesPerNSG_Iterator.Name
				$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "Priority" -Value $securityRulesPerNSG_Iterator.Priority
				$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "Protocol" -Value $securityRulesPerNSG_Iterator.Protocol
				$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "Direction" -Value $securityRulesPerNSG_Iterator.Direction
				$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "SourcePortRange" -Value ($securityRulesPerNSG_Iterator | Select-Object @{ Name = "SourcePortRange"; Expression = { $_.SourcePortRange } })
				$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "DestinationPortRange" -Value ($securityRulesPerNSG_Iterator | Select-Object @{ Name = "DestinationPortRange"; Expression = { $_.DestinationPortRange } })
				$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "SourceAddressPrefix" -Value ($securityRulesPerNSG_Iterator | Select-Object @{ Name = "SourceAddressPrefix"; Expression = { $_.SourceAddressPrefix } })
				$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "DestinationAddressPrefix" -Value ($securityRulesPerNSG_Iterator | Select-Object @{ Name = "DestinationAddressPrefix"; Expression = { $_.DestinationAddressPrefix } })
				$network_security_groups_object_temp | add-member -MemberType NoteProperty -Name "Access" -Value $securityRulesPerNSG_Iterator.Access
				
				$network_security_groups_object += $network_security_groups_object_temp
				$Global:network_security_groups_object_All += $network_security_groups_object_temp
			}
			
			# Setting the pointer to the next row and first column
			
			
		}
		
		if ($network_security_groups_object -ne $null)
		{
			$network_security_groups_object | Export-Csv "nsg_custom_rules_details.csv" -NoTypeInformation -Force
		}
		
		
		
		
		#####################################################################
		#    Fetching Storage Account Details                               #
		#####################################################################
		
		$richtextbox1.Text += "Fetching Storage Account Details" + $Global:NewLine
		
		
		$storage_account_object = $null
		$storage_account_object = @()
		
		foreach ($azureStorageAccountDetails_Iterator in $azureStorageAccountDetails)
		{
			
			# Populating the cells
			
			$storage_account_object_temp = new-object PSObject
			$storage_account_object_temp | Add-Member -MemberType NoteProperty -Name "Subscription" -Value $global:subscription_Name
			$storage_account_object_temp | add-member -MemberType NoteProperty -Name "ResourceGroupName" -Value $azureStorageAccountDetails_Iterator.ResourceGroupName
			$storage_account_object_temp | add-member -MemberType NoteProperty -Name "StorageAccountName" -Value $azureStorageAccountDetails_Iterator.StorageAccountName
			$storage_account_object_temp | add-member -MemberType NoteProperty -Name "Location" -Value $azureStorageAccountDetails_Iterator.Location
			$storage_account_object_temp | add-member -MemberType NoteProperty -Name "StorageTier" -Value $azureStorageAccountDetails_Iterator.Sku.Tier
			$storage_account_object_temp | add-member -MemberType NoteProperty -Name "ReplicationType" -Value $azureStorageAccountDetails_Iterator.Sku.Name
			
			
			
			# Setting the pointer to the next row and first column
			$storage_account_object += $storage_account_object_temp
			$Global:storage_account_object_All += $storage_account_object_temp
		}
		
		$storage_account_object | Export-Csv "Storage_Account_Details.csv" -NoTypeInformation -Force
		
		
		
		#####################################################################
		#    Fetching Virtual Network Details                               #
		#####################################################################
		$richtextbox1.Text += "Fetching Virtual Network Details" + $Global:NewLine
		
		$virtual_network_object = $null
		$virtual_network_object = @()
		
		foreach ($azureVirtualNetworkDetails_Iterator in $azureVirtualNetworkDetails)
		{
			
			$virtual_network_object_temp = New-Object PSObject
			
			# Populating the cells
			$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name "Subscription" -Value $global:subscription_Name
			$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name "ResourceGroupName" -Value $azureVirtualNetworkDetails_Iterator.ResourceGroupName
			$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name "Location" -Value $azureVirtualNetworkDetails_Iterator.Location
			$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name "VNETName" -Value $azureVirtualNetworkDetails_Iterator.Name
			#$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name "AddressSpace" -Value $azureVirtualNetworkDetails_Iterator.AddressSpace.AddressPrefixes
			
			
			
			#$VirtualNetworkWorksheet.Cells.Item($row_counter,$column_counter++) = $azureVirtualNetworkDetails[$vnet_iterator].DhcpOptions.ToString()
			
			$subnetPerVNET = $azureVirtualNetworkDetails_Iterator.Subnets
			$subnet_count = 1
			foreach ($subnetPerVNET_Iterator in $subnetPerVNET)
			{
				$subnet_name = "Subnet" + $subnet_count
				$subnet_address_space = "SubnetAddressSpace" + $subnet_count
				$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name $subnet_name -Value $subnetPerVNET_Iterator.Name
				$virtual_network_object_temp | Add-Member -MemberType NoteProperty -Name $subnet_address_space -Value $subnetPerVNET_Iterator.AddressPrefix
				$subnet_count += 1
				#$virtual_network_object += $virtual_network_object_temp
				
			}
			
			# Setting the pointer to the next row and first column
			$virtual_network_object += $virtual_network_object_temp
			$Global:virtual_network_object_All += $virtual_network_object_temp
		}
		
		$virtual_network_object | Export-Csv "Virtual_networks_details.csv" -NoTypeInformation -Force
		
		
		
		#####################################################################
		#    Fetching External Load Balancer Details                        #
		#####################################################################
		$richtextbox1.Text += "Fetching External Load Balancer Details" + $Global:NewLine
	
		
		$azure_load_balancer_object = $null
		$azure_load_balancer_object = @()
		
		foreach ($AzureLBList_Iterator in $AzureLBList)
		{
			
			# Populating the cells
			
			$azure_load_balancer_object_temp = new-object PSObject
			$azure_load_balancer_object_temp | Add-Member -MemberType NoteProperty -Name "Subscription" -Value $global:subscription_Name
			$azure_load_balancer_object_temp | add-member -MemberType NoteProperty -Name "ResourceGroupName" -Value $AzureLBList_Iterator.ResourceGroupName
			$azure_load_balancer_object_temp | add-member -MemberType NoteProperty -Name "Name" -Value $AzureLBList_Iterator.Name
			$azure_load_balancer_object_temp | add-member -MemberType NoteProperty -Name "Location" -Value $AzureLBList_Iterator.Location
			$azure_load_balancer_object_temp | add-member -MemberType NoteProperty -Name "FrontendIpConfigurationsName" -Value $AzureLBList_Iterator.FrontendIpConfigurations.name
			$azure_load_balancer_object_temp | add-member -MemberType NoteProperty -Name "BackendAddressPoolsName" -Value $AzureLBList_Iterator.BackendAddressPools.name
			
			
			# Back End VM List
			$AzureLBBackendPoolVMs = $AzureLBList_Iterator.BackendAddressPools.BackendIpConfigurations
			
			$aa
			# Proceed only if $ExternalLBBackendPoolVMs array has data.
			if ($AzureLBBackendPoolVMs.count -ne $NULL)
			{
				
				$AzureLBBackendPoolVMsID_count = 1
				foreach ($AzureLBBackendPoolVMs_Iterator in $AzureLBBackendPoolVMs)
				{
					#$column_counter = 6
					
					if ($null -eq $AzureLBBackendPoolVMs_Iterator)
					{
						
						continue
						
					}
					
					$AzureLBBackendPoolVMsID_name = "AzureLBBackendPoolVMsID" + $AzureLBBackendPoolVMsID_count
					$azure_load_balancer_object_temp | add-member -MemberType NoteProperty -Name $AzureLBBackendPoolVMsID_name -Value $AzureLBBackendPoolVMs_Iterator.id
					$AzureLBBackendPoolVMsID_count += 1
				}
				
			}
			
			$azure_load_balancer_object += $azure_load_balancer_object_temp
			$Global:azure_load_balancer_object_ALL += $azure_load_balancer_object_temp
		}
		
		$azure_load_balancer_object | Export-Csv "Azure_Load_Balancer_details.csv" -NoTypeInformation -Force
		
	}
	
	
	
	###########################################################
	###############  COLLECTION   #############################
	###########################################################
	
	
	
	new-item $Global:working_directory -ItemType Directory -Force
	
	
	$richtextbox1.Text = "Fetching the IaaS inventory list for each subscription" + $Global:NewLine
	
	foreach ($subscription_list_iterator in $Global:subscription_list)
	{
		$Global:subscription_id = $subscription_list_iterator.id
		$Global:subscription_name = $subscription_list_iterator.name
		Update-ListBox $listbox1 $subscription_name
		
		
		if ($subscription_list_iterator.State -ne "Disabled")
		{
			Get-AzureInventory($Global:subscription_id)
		}
		
	}
	
}


$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	if($datagridviewResults.DataSource -is [System.Data.DataTable])
	{
		$column = $datagridviewResults.Columns[$_.ColumnIndex]
		$direction = [System.ComponentModel.ListSortDirection]::Ascending
		
		if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
		{
			$direction = [System.ComponentModel.ListSortDirection]::Descending
		}

		$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
	}
}

$buttonAuthenticate_Click = {
	
	function Invoke-GetAzureInventoryFunction
	{
		
		# Sign into Azure Portal
		Connect-AzAccount
		
		# Fetching subscription list
		$Global:subscription_list = get-azurermsubscription
		Update-ListBox $listbox1 $Global:subscription_list
		
		
	}
	
	if (!$checkboxAuto.Checked)
	{
		Invoke-GetAzureInventoryFunction
	}
	else
	{   #######################################################################################################################
		### To-Do	Create an APP - Store Password in file runOnce
		### TO-DO	Create a certificate based sign on 
		######################################################################################################################
		
		$applicationId = "042af287-6486-4067-8324-f60174fce5b4";
		$securePassword = "9G9nVmBV3oW2oATHvaOPhgyosU0Qb7UCKnArwWUOBwg=" | ConvertTo-SecureString -AsPlainText -Force
		
		
		$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $applicationId, $securePassword
		Connect-AzAccount -ServicePrincipal -Credential $credential -TenantId "92832cfc-349a-4b12-af77-765b6f10b51f"
		
		
		
		# Fetching subscription list
		
		$Global:subscription_list = get-azsubscription
		$richtextbox1.Text = "Authenticated" + $Global:NewLine
		Update-ListBox $listbox1 $Global:subscription_list
		
		
		#https://social.technet.microsoft.com/wiki/contents/articles/40062.automating-azure-login-for-powershell-scripts-using-service-principal.aspx	
	}
	
}

########################## VIEW SELECTOR #########################
$buttonRefreshView_Click = {
	#$Global:azure_load_balancer_object_ALL 
	#$Global:virtual_network_object_All
	#$Global:storage_account_object_All
	#$Global:network_security_groups_object_All
	#$global:virtual_machine_object_All
	
	if ($radiobuttonVM.Checked){Update-DataGridView -DataGridView $datagridviewResults -Item $Global:virtual_machine_object_All -AutoSizeColumns DisplayedCells}
	If ($radiobuttonLoadBalancer.checked){Update-DataGridView -DataGridView $datagridviewResults -Item $Global:azure_load_balancer_object_ALL  -AutoSizeColumns DisplayedCells}
	If ($radiobuttonnsg.checked){Update-DataGridView -DataGridView $datagridviewResults -Item $Global:network_security_groups_object_All -AutoSizeColumns DisplayedCells}
	If ($radiobuttonStorageAccount.checked) { Update-DataGridView -DataGridView $datagridviewResults -Item $Global:storage_account_object_All -AutoSizeColumns DisplayedCells }
	
	
	$table1 = ConvertTo-DataTable -InputObject $Global:virtual_network_object_All
	If ($radiobuttonVNet.checked) { Update-DataGridView -DataGridView $datagridviewResults -Item $table1  }
	#https://www.sapien.com/blog/2015/01/19/creating-a-gui-for-csv-data/
}


$listbox1_SelectedIndexChanged={
	
}


$buttonExit_Click = {
	$formMain.Close()
	
}

]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>