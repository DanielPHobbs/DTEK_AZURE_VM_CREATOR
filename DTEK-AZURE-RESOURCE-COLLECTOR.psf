<File version="3.1">
  <FileID>5d4ffab2-a0b9-42fd-a4cc-3ee7484bff51</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAABgQSURBVHhe7d3bc9f3nd/x/AXN3uxf0Lte70Wv
O9vp1Xa607u2m9lOu5M27KRNPGns2LG9jZ3YgLFd7OAYbINjY2wOBowQJ4OEJHQ+S4DAEjqiA+Jo
3PiQzrvfzw+wWaxPwLScPjyeM48Rkn6/n/Tzzef1/Ung70mSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJOmbfvVn
f/b9+mXL/r5+5ar/Vf/886vqnwMAHijPr1hVv2rVS/X/6l/+ZX11tid/uu9//580LX/h5eg8Ph3D
E+djcPwsAPCAGRo/F0OT56Opcyj+6q/+dVw95vP9l/+6rL7r2HQ0D07Goe5P4lAPAPAgOljp+mQx
tu/++OYD4MWXVtePzFyKht7RONw3BgAPt/5T0TI4ES1D303TwHjt/s3V26U+/6c0D165b1P62kt8
/mbS/a59/0eOzkRz59DNB8CKlS/WBkC6c/qmmweqt9UTT68IXJFeHbhqoPr417cDgPKkQ3RX40B8
1NB/y3Ye6ouPO07EkaHJ2Nd6rPb+Urdbys5D/VHfPFQbHQ3VFfxSt7mZhu5PouXq999+bDYaW/tu
bQCcOP1pdadqRaTFkw79npFo6hqOpu7j0dgxEA2tXbW3zX3VF6ie3JXbTdSeaHLt/XTfb/5cScvk
+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
BgAAxTIA8gwAAIplAOQZAAAUywDIMwAAKJYBkGcAAFAsAyDPAACgWAZAngEAQLEMgDwDAIBiGQB5
BgAAxTIA8gwAAIplAOQZAAAUywDIMwAAKJYBkGcAAFAsAyDPAACgWAZAngEAQLEMgDwDAIBiGQB5
BgAAxTIA8gwAAIplAOQZAAAUywDIMwAAKJYBkGcAAFAsAyDPAACgWAZAngEAQLEMgDwDAIBiGQB5
BgAAxTIA8gwAAIplAOQZAAAUywDIMwAAKJYBkGcAAFAsAyDPAACgWAZAngEAQLEMgDwDAIBiGQB5
BgAAxTIA8gwAAIplAOQZAAAUywDIMwAAKJYBkGcAAFAsAyDPAACgWAZAngEAQLEMgDwDAIBiGQB5
BgAAxTIA8gwAAIplAOQZAAAUywDIMwAAKJYBkGcAAFAsAyDPAACgWAZAngEAQLEMgDwDAIBiGQB5
BgAAxTIA8gwAAIplAOQZAAAUywDIMwAAKJYBkGcAAFAsAyDPAACgWAZAngEAQLEMgDwDAIBiGQB5
BgAAxTIA8gwAAIplAOQZAAAUywDIMwAAKJYBkGcAAFAsAyDPAACgWAZAngEAQLEMgDwDAIBiGQB5
BgAAxTIA8gwAAIplAOQZAAAUywDIMwAAKJYBkGcAAFAsAyDPAACgWAZAngEAQLEMgDwDAIBiGQB5
BgAAxTIA8gwAAIplAOQZAAAUywDIMwAAKJYBkGcAAFAsAyDPAACgWAZAngEAQLEMgDwDAIBiGQB5
BgAAxTIA8gwAAIplAOQZAAAUywDIMwAAKJYBkGcAAFAsAyDPAACgWAZAngEAQLEMgDwDAIBiGQB5
BgAAxTIA8gwAAIplAOQZAAAUywDIMwAAKJYBkGcAAFAsAyDPAACgWAZAngEAQLEMgDwDAIBiGQB5
BgAAxTIA8gwAAIplAOQZAAAUywDIMwAAKJYBkGcAAFAsAyDPAACgWAZAngEAQLEMgDwDAIBiGQB5
BgAAxTIA8gwAAIplAOQZAAAUywDIMwAAKJYBkGcAAFAsAyDPAACgWAZAngEAQLEMgDwDAIBiGQB5
BgAAxTIA8gwAAIplAOQZAAAUywDIMwAAKJYBkGcAAFAsAyDPAACgWAZAngEAQLEMgDwDAIBiGQB5
BgAAxTIA8gwAAIplAOQZAAAUywDIMwAAKJYBkGcAAFAsAyDPAACgWAZAngEAQLEMgDwDAIBiGQB5
BgAAxTIA8gwAAIplAOTdsQHw6KOPxqZNm6Kuri527doFAHfd3r1745VXXomVK1caADe4IwPgyy+/
jB/96EexbNmyeOSRR+KnP/0pANx1P/vZz+IHP/hBPP/88wbADe7IAPj0009jeHg4Ghsbo6GhAQDu
mcOHD8fY2FhcuvTt8+phdkcGwPnz52s/BkivBADAvfbZZ5/VzqYbz6uH2R0ZAMnFixe/Xlvpz3db
+rrWHgD32vXn0vXn1N201Hl4x34EMDMzEx0dHdHb23tP9PT01KTvJz35G79HALjT0nk4OTkZ7e3t
S55Vd0N3d3f09/d/6yy8IwPg8uXLMTo6WvvC6YmfOnXqTxs7FdOnZ2JqcmLpz18zPlENi9kYPzW2
9OevMz4+XhsgZ8+eNQAAuCfSeXjixInaATwxcZMz7pqxsZiYmo7Fc2dj8cxinJ6ejLHqnByrPjdV
fXy6OlcnJsaXvu8S0u8/dHV1fetHIHdsAKQvODAwENPT07UnnTcZM7OT0bavMXr6R6onN1mNgdlY
mJutPdH5hYWYm52JyamZmJ8ejZamPXFi/HRtLCz9eFek4ZFWjwEAwL2SzsOTJ0/G0NBQdaZNLXle
3Wj69OkY6W6Ol5/9TSxfsTw+au6LxYX5WJifi862lmgbGImZ6nycqg2BpR/jeumCOL0ifl8OgIXz
U/HuM6/Grv09cWZxIY71tsauA00x9slIHNj/cbT2HIvTU6di7+Y34qlnHo3hifPVAlrqsb5hAABw
r93OAJhdnI/D770bK59eF12DPXG4uTmGj5+Iwb7OONLVHwfqNsWvnn8tRmeqC+WbnIXJfT0A5s9N
xQcr1sX+puOxcKqnWjzPxFPPPRtvbf4gfvnf/y7+/Q9/FK9vWBtPPP5YPPb0L2Nk2gAA4P53WwPg
zEK0b38v/v5vfhwvrl4dO3Zuieef/nE8//Irseat38fyl1fEI4/9pjoL567+OGDpx7nmPn8FYDre
/81vY/vevhhq2Rr/sHpNtDTuih8+9kiseGl5/PIn/y5+8vQ/RP3+3fHqyidjcPysAQDAfe/2XwHY
GKueWR89Rwfj1Gh/PPaf/20898bWeGfDunhu7YZ4s/rz1PxcTC5x/xvd1wNg7sxsbHp5efztf/y7
eHLFq/H7t16NXzy3Kg427I1Xfv3reHbFythbHf5P//yReOm1DXFq5ozfAQDgvnc7A2BmbjaGW/bH
//zZL+LXz/0m/sfjT8TqtWtj3UvPxcrVb8S+pkOxduXvontkPGamH+BXANJBPX5qPNb87nex6oWV
sXz58q+/0dnZuZibn4/5hTMxNzsbCwsLMV+9PzkxvuRjXc8AAOBeu50BMFEd2FMzp2PhzHycO3cu
Dh1qiJUrX4gVK1fGu+++E4vpTLzFq//krg+A9NcA0197uNkASN9YepsO98XFxZp0n2sfv11pAHR2
dhoAANwz6TxMfw1wcHDw1gfAddJZmP5dnTNnzsSZ6nxMF8Hf9XxMt79rfw0w/cMH6RBva2ur/VsA
aXncbenq/9oTNgAAuBfSeZgO4HQeLnVW3Q3pLExn8Y1n4R0ZAMm1L5QO4HvFwQ/AvXa/nod3bAAA
APcvAwAAHkIGAAA8hP6/DID0IADAg+PypQsxd/b/YQCcmLlUWxAAwINjvjr8J+cvxtHbGQDHpi/V
pPUAADxY0uGfzvFbHgArXnh5z4WvonYHAODBNnM5omd49OYD4BdPPNk4fHKiWgvHaosBAHhw9QyN
xp79jTcfAJIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSYX2ve/9X9cr0+or13jGAAAAAElFTkSuQmCC</Preview>
  <Form>Yi9Y1AIaaAoAACODCAAAAAAABADVlduO2jAQhu8r9R2sXPQq4nxYVIi0HLatFrqIUHqJTDILLo6NbGeBPn0n
BMS2SUlohdQKKcLK/DP/2N847afFN/CMdt6+IaQdL4jZb6BjuXttICh8ZcKXW114kCqInzZJe2WT
GSjNpOjUCqXoZ5NeyE2ooCMgNIpym4zDBWfeI+yncg2is2g2ad2rN8qtag1Kdy2LCBpg5WfMN6JM
WMRbMe4rDLV6UhglubYOTtHrWMkNKLM/au5DI12PcuizAETkA0MbNilX28VTaJZ0JH2wnAeslKnp
cQbCuOw7CsqlVtMm9XojU/UZn5Zzai8z3DVUmbHUzGA7ltPDiqBcTwFka6ewM5bzQTE/GTp4wUzH
uKGk/tnSPFq2i4eAU3Q2FH1qaFRpxmB7czh8LLbEYi9YbAIas+hLnKQcN+dy+0WDmsp735+gRzxz
yjUkNuqitg8cDFwpF95KKsuZyo1NutIYicM0hGdjkwlbrpLYJVMMpUdjHMoVm1RaOSQxdSn7lkM7
Aeo/Cb5HzyrM02I8Eq0qnnDtLjkRKaDSxSfhw85yKmnRr1ntSR4G4iNaAjWSoQacQm+d2to8PfYX
tIsx2/lJ74Z4ZuLmjC8OZQY7Zq5E+8jXCa0/gKpURt/1Sjk3V2evuelo1pHc5L18iY08fuIrb/CO
Bpv3+ezgJPdksMHeFxwi+QSwnGJimZt3TDFjOqTcNXsOXeqtkbzDjP9G/xPQMb/nLZz/f5QePiB/
RWl0AV59812PaPxpux2ipdyIHgjNaeefQjTynInoq8Xpr3Z+AK34W2ZoCgAA</Form>
  <Code><![CDATA[
#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)	
}
#endregion

$formMain_Load={
	#TODO: Initialize Form Controls here
	
}

$buttonExit_Click={
	#TODO: Place custom script here
	$formMain.Close()
}

$buttonLoad_Click= {
	#TODO: Place custom script here
	#	---------------------------------
	#	Sample Code to Load Grid
	#	---------------------------------
	#	$processes = Get-WmiObject Win32_Process -Namespace "Root\CIMV2"
	#	Update-DataGridView -DataGridView $datagridviewResults -Item $processes -AutoSizeColumns DisplayedCells
	#	---------------------------------
	#	Sample Code to Load Sortable Data
	#	---------------------------------
	# 	$processes = Get-WmiObject Win32_Process -Namespace "Root\CIMV2"
	#	$table = ConvertTo-DataTable -InputObject $processes -FilterWMIProperties
	#	Update-DataGridView -DataGridView $datagridviewResults -Item $table -AutoSizeColumns DisplayedCells
}

$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	if($datagridviewResults.DataSource -is [System.Data.DataTable])
	{
		$column = $datagridviewResults.Columns[$_.ColumnIndex]
		$direction = [System.ComponentModel.ListSortDirection]::Ascending
		
		if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
		{
			$direction = [System.ComponentModel.ListSortDirection]::Descending
		}

		$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
	}
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>